getwd()
write_csv(raw_niche_data, "./../3_generated_data/raw_niche_data_mess.csv")
write_csv(raw_niche_data_mess, "./../3_generated_data/raw_niche_data_mess.csv")
rm(list=setdiff(ls(), "dir_archive"))
raw_niche_data <- read_csv("raw_niche_data.csv")
raw_niche_data <- read_csv("raw_niche_data_mess.csv")
raw_niche_data_mess <- read_csv("./../3_generated_data/raw_niche_data_mess.csv")
rm(list=setdiff(ls(), c("dir_archive", "raw_niche_data_mess")))
niche_data <- raw_niche_data %>%
mutate(lat_range_mad_s = as.numeric(NA)) %>%
mutate(lat_range_mad_n = as.numeric(NA)) %>%
mutate(lat_range_mad_g = as.numeric(NA)) %>%
mutate(lat_range_sd_s = as.numeric(NA)) %>%
mutate(lat_range_sd_n = as.numeric(NA)) %>%
mutate(lat_range_sd_g = as.numeric(NA)) %>%
mutate(lat_median_s = as.numeric(NA)) %>%
mutate(lat_median_n = as.numeric(NA)) %>%
mutate(lat_median_g = as.numeric(NA)) %>%
mutate(hemisphere = as.numeric(NA)) %>%
mutate(lat_n95q = as.numeric(NA)) %>%
mutate(lat_s05q = as.numeric(NA))
# -------------------------------------------------------------------------------------------------------
##### Reading in the species occurrences
occurrences_trees <- read_csv(paste("./../1_original_data/tree_occurrences_Andrea_clean_withElevation.csv", sep = "")) %>%
filter(Species %in% raw_niche_data_mess$Species) %>%
mutate(hemisphere = sign(latitude)) %>%
filter(hemisphere != 0) %>%
dplyr::select(-...1) %>%
mutate(growthform = "tree")
occurrences_herbs <- read_csv(paste("./../1_original_data/herb_occs_elevation-105450sp.csv", sep = "")) %>%
filter(Species %in% raw_niche_data$Species) %>%
mutate(hemisphere = sign(latitude)) %>%
filter(hemisphere != 0) %>%
mutate(growthform = "herb") %>%
rename(Source = source) %>%
select(occID, Species, longitude, latitude, Source, elevation, hemisphere, growthform)
southern_herbs <- occurrences_herbs %>%
filter(hemisphere == -1)
occurrences_herbs <- read_csv(paste("./../1_original_data/herb_occs_elevation-105450sp.csv", sep = "")) %>%
filter(Species %in% raw_niche_data_mess$Species) %>%
mutate(hemisphere = sign(latitude)) %>%
filter(hemisphere != 0) %>%
mutate(growthform = "herb") %>%
rename(Source = source) %>%
select(occID, Species, longitude, latitude, Source, elevation, hemisphere, growthform)
southern_herbs <- occurrences_herbs %>%
filter(hemisphere == -1)
northern_herbs <- occurrences_herbs %>%
filter(hemisphere == 1)
southern_trees <- occurrences_trees %>%
filter(hemisphere == -1) %>%
filter(Species %in% raw_niche_data$Species)
southern_herbs <- occurrences_herbs %>%
filter(hemisphere == -1) %>%
filter(Species %in% raw_niche_data_mess$Species)
northern_herbs <- occurrences_herbs %>%
filter(hemisphere == 1) %>%
filter(Species %in% raw_niche_data_mess$Species)
southern_trees <- occurrences_trees %>%
filter(hemisphere == -1) %>%
filter(Species %in% raw_niche_data_mess$Species)
northern_trees <- occurrences_trees %>%
filter(hemisphere == 1) %>%
filter(Species %in% raw_niche_data_mess$Species)
niche_data[!is.na(match(niche_data$Species, unique(southern_trees$Species))),]$lat_range_mad_s <- tapply(southern_trees$latitude, southern_trees$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data <- raw_niche_data %>%
mutate(lat_range_mad_s = as.numeric(NA)) %>%
mutate(lat_range_mad_n = as.numeric(NA)) %>%
mutate(lat_range_mad_g = as.numeric(NA)) %>%
mutate(lat_range_sd_s = as.numeric(NA)) %>%
mutate(lat_range_sd_n = as.numeric(NA)) %>%
mutate(lat_range_sd_g = as.numeric(NA)) %>%
mutate(lat_median_s = as.numeric(NA)) %>%
mutate(lat_median_n = as.numeric(NA)) %>%
mutate(lat_median_g = as.numeric(NA)) %>%
mutate(hemisphere = as.numeric(NA)) %>%
mutate(lat_n95q = as.numeric(NA)) %>%
mutate(lat_s05q = as.numeric(NA))
niche_data <- raw_niche_data_mess %>%
mutate(lat_range_mad_s = as.numeric(NA)) %>%
mutate(lat_range_mad_n = as.numeric(NA)) %>%
mutate(lat_range_mad_g = as.numeric(NA)) %>%
mutate(lat_range_sd_s = as.numeric(NA)) %>%
mutate(lat_range_sd_n = as.numeric(NA)) %>%
mutate(lat_range_sd_g = as.numeric(NA)) %>%
mutate(lat_median_s = as.numeric(NA)) %>%
mutate(lat_median_n = as.numeric(NA)) %>%
mutate(lat_median_g = as.numeric(NA)) %>%
mutate(hemisphere = as.numeric(NA)) %>%
mutate(lat_n95q = as.numeric(NA)) %>%
mutate(lat_s05q = as.numeric(NA))
niche_data[!is.na(match(niche_data$Species, unique(southern_trees$Species))),]$lat_range_mad_s <- tapply(southern_trees$latitude, southern_trees$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(southern_trees$Species))),]$lat_range_sd_s <- tapply(southern_trees$latitude, southern_trees$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(southern_trees$Species))),]$lat_median_s <- tapply(southern_trees$latitude, southern_trees$Species, function(x) abs(round(median(x, na.rm = TRUE), digits = 3)))
# Northern trees
niche_data[!is.na(match(niche_data$Species, unique(northern_trees$Species))),]$lat_range_mad_n <- tapply(northern_trees$latitude, northern_trees$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(northern_trees$Species))),]$lat_range_sd_n <- tapply(northern_trees$latitude, northern_trees$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(northern_trees$Species))),]$lat_median_n <- tapply(northern_trees$latitude, northern_trees$Species, function(x) abs(round(median(x, na.rm = TRUE), digits = 3)))
# Global trees
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$lat_range_mad_g <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$lat_range_sd_g <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$lat_median_g <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) round(median(x, na.rm = TRUE), digits = 3))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$hemisphere <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) sign(median(x, na.rm = TRUE)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$lat_n95q <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) round(quantile(x, probs = .95, na.rm = TRUE), digits = 3))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_trees$Species))),]$lat_s05q <- tapply(occurrences_trees$latitude, occurrences_trees$Species, function(x) round(quantile(x, probs = .05, na.rm = TRUE), digits = 3))
# Southern herbs
niche_data[!is.na(match(niche_data$Species, unique(southern_herbs$Species))),]$lat_range_mad_s <- tapply(southern_herbs$latitude, southern_herbs$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(southern_herbs$Species))),]$lat_range_sd_s <- tapply(southern_herbs$latitude, southern_herbs$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(southern_herbs$Species))),]$lat_median_s <- tapply(southern_herbs$latitude, southern_herbs$Species, function(x) abs(round(median(x, na.rm = TRUE), digits = 3)))
# Northern herbs
niche_data[!is.na(match(niche_data$Species, unique(northern_herbs$Species))),]$lat_range_mad_n <- tapply(northern_herbs$latitude, northern_herbs$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(northern_herbs$Species))),]$lat_range_sd_n <- tapply(northern_herbs$latitude, northern_herbs$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(northern_herbs$Species))),]$lat_median_n <- tapply(northern_herbs$latitude, northern_herbs$Species, function(x) round(median(abs(x), na.rm = TRUE), digits = 3))
# Global herbs
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$lat_range_mad_g <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) abs(round(mad(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$lat_range_sd_g <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) abs(round(sd(x, na.rm = TRUE), digits = 3)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$lat_median_g <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) round(median(x, na.rm = TRUE), digits = 3))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$hemisphere <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) sign(median(x, na.rm = TRUE)))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$lat_n95q <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) round(quantile(x, probs = .95, na.rm = TRUE), digits = 3))
niche_data[!is.na(match(niche_data$Species, unique(occurrences_herbs$Species))),]$lat_s05q <- tapply(occurrences_herbs$latitude, occurrences_herbs$Species, function(x) round(quantile(x, probs = .05, na.rm = TRUE), digits = 3))
# Adding global parameters
niche_data <- niche_data %>%
mutate(lat_range_mad_max = pmax(lat_range_mad_s, lat_range_mad_n, na.rm = TRUE)) %>%
mutate(lat_range_sd_max = pmax(lat_range_sd_s, lat_range_sd_n, na.rm = TRUE)) %>%
mutate(lat_median_ave = rowMeans(niche_data[,c("lat_median_s", "lat_median_n")], na.rm = TRUE)*niche_data$hemisphere)
# -------------------------------------------------------------------------------------------------------
# Check if the number of NAs is reasonable. Most columns should not have any NAs, elevation might have some
as.data.frame(niche_data) %>% summarise_all(~ sum(is.na(.)))
### Filter
niche_data <- niche_data %>%
filter(auc.val.avg > 0.55) %>%
filter(0.05 < or.10p.avg) %>%
filter(or.10p.avg < 0.3)
# Export
write_csv(niche_data, "./../3_generated_data/niche_data_final.csv")
rm(list=setdiff(ls(), c("dir_archive", "niche_data")))
library("tidyverse")
library("data.table")
library("dplyr")
library("ggpubr")
library("viridis")
library("plotly")
library("gridExtra")
library("data.table")
library("viridis")
/Users/marco/GitHub/environmental_breadth/
base::setwd("."); getwd()
dir_archive <- "/Users/marco/Documents/env_breadth_archive/"
my_plotting <- function(df,
xc,
yc,
gfc,
binc,
gf_sel = growthform,
ttitle,
xxlab,
yylab,
plot_type,
binning,
y_lim_s,
y_lim_n) {
df <- df %>% filter(.data[[gfc]] == gf_sel)
mycolors <- c("#00000000", colorRampPalette(c("#FFFFD6FF", "yellow", "orange", "red"), alpha=TRUE)(20))
p <- ggplot(data = df,
aes(y = .data[[yc]])) +
ggtitle(paste(ttitle, gf_sel)) +
xlab(xxlab) +
ylab(yylab) +
theme(text = element_text(size = 25)) +
theme_classic()
if (plot_type == "bp") {p <- p +
geom_boxplot(data = df, aes(x = .data[[binc]], group = .data[[binc]]))}
if (plot_type == "sp") {p <- p +
geom_point(data = df, aes(x = .data[[xc]], alpha = 0.5)) +
geom_smooth(data = df, aes(x = .data[[xc]]), method = "lm", color = "black", size = 2, show.legend = FALSE)}
if (plot_type == "dp") {p <- p +
geom_density_2d_filled(data = df, aes(x = .data[[xc]]))}
if (plot_type == "p_median") {
if (binning == "eq_points") {p <- p +
#geom_point(data = df,
#           aes(x = .data[[xc]]),
#           size = 0.5,
#           alpha = 0.1,
#           #alpha = (((northern$al_range/(max(northern$al_range)))^2) + ((northern$al_median/(max(northern$al_median)))^2))^2
#) +
#geom_polygon(aes(x, y), fill = "white",
#             data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
#                                  contourLines(x=eval.points[[1]], y=eval.points[[2]],
#                                               z=estimate, levels=cont["50%"])[[1]]))) +
scale_fill_manual(values = mycolors) +
geom_density_2d_filled(data = df,
aes(x = .data[[xc]]),
bins = 20, show.legend = FALSE) +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["50%"])[[1]])),
linetype = "dotted") +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["20%"])[[1]])),
linetype = "dashed") +
#geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
#                                          contourLines(x=eval.points[[1]], y=eval.points[[2]],
#                                                       z=estimate, levels=cont["5%"])[[1]]))) +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
breaks = quantile(df[[xc]], probs = seq(0, 1, by = 0.05)),
fun = median,
fun.min = function(x) median(x)-max(x),
fun.max = function(x) median(x)+mad(x))
}
if (binning == "eq_distance") {p <- p +
geom_point(data = df,
aes(x = .data[[xc]]),
size = 0.5,
alpha = 0.1,
#alpha = (((northern$al_range/(max(northern$al_range)))^2) + ((northern$al_median/(max(northern$al_median)))^2))^2
) +
geom_polygon(aes(x, y), fill = "white",
data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["5%"])[[1]]))) +
scale_fill_manual(values = mycolors) +
geom_density_2d_filled(data = df,
aes(x = .data[[xc]]),
bins = 20, show.legend = FALSE) +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["50%"])[[1]])),
linetype = "dotted") +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["20%"])[[1]])),
linetype = "dashed") +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["5%"])[[1]]))) +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
fun = median,
fun.min = function(x) median(x)-max(x),
fun.max = function(x) median(x)+mad(x))}
}
if (plot_type == "p_mean") {
if (binning == "eq_points") {p <- p +
scale_fill_manual(values = mycolors) +
geom_density_2d_filled(data = df,
aes(x = .data[[xc]]),
bins = 20, show.legend = FALSE) +
#geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
#                                          contourLines(x=eval.points[[1]], y=eval.points[[2]],
#                                                       z=estimate, levels=cont["20%"])[[1]])),
#          linetype = "dashed") +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
breaks = quantile(df[[xc]], probs = seq(0, 1, by = 0.05)),
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x))) +
coord_cartesian(ylim=c(y_lim_s, y_lim_n))}
if (binning == "eq_distance") {p <- p +
geom_point(data = df,
aes(x = .data[[xc]]),
size = 0.5,
alpha = 0.1,
#alpha = (((northern$al_range/(max(northern$al_range)))^2) + ((northern$al_median/(max(northern$al_median)))^2))^2
) +
geom_polygon(aes(x, y), fill = "white",
data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["5%"])[[1]]))) +
scale_fill_manual(values = mycolors) +
geom_density_2d_filled(data = df,
aes(x = .data[[xc]]),
bins = 20, show.legend = FALSE) +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["50%"])[[1]])),
linetype = "dotted") +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["20%"])[[1]])),
linetype = "dashed") +
geom_path(aes(x, y), data=data.frame(with(ks::kde(df %>% select(.data[[xc]], .data[[yc]]), compute.cont=TRUE),
contourLines(x=eval.points[[1]], y=eval.points[[2]],
z=estimate, levels=cont["5%"])[[1]]))) +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)))}
}
if (plot_type == "simple") {
if (binning == "eq_points") {p <- p +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
breaks = quantile(df[[xc]], probs = seq(0, 1, by = 0.05)),
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)))}
if (binning == "eq_distance") {p <- p +
stat_summary_bin(data = df,
aes(x = df[[xc]]),
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)))}
}
return(p)
}
niche_data <- read_csv("./niche_data.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4)); range(niche_data$e_breadth); ds <- niche_data
niche_data <- read_csv("./../3_generated_data/niche_data.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4)); range(niche_data$e_breadth); ds <- niche_data
getwd()
niche_data <- read_csv("./../3_generated_data/niche_data_final.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4)); range(niche_data$e_breadth); ds <- niche_data
nine_plots <- function(ds,
growthform = "tree",
plot.type = "p_mean",
bin.ning = "eq_points") {
#------------- Latitudinal range
median_lrange_n <- my_plotting(ds %>% filter(hemisphere == 1),
xc = "lat_median_n",
yc = "lat_range_sd_n",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Northern hemisphere",
xxlab = 'Latitudinal median',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
median_lrange_s <- my_plotting(ds %>% filter(hemisphere == -1),
xc = "lat_median_s",
yc = "lat_range_sd_s",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Southern hemisphere",
xxlab = 'Latitudinal median',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
median_lrange_g <- my_plotting(ds,
xc = "lat_median_g",
yc = "lat_range_sd_g",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Global",
xxlab = 'Latitudinal median',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
#------------- Environmental breadth
median_ebreadth_n <- my_plotting(ds %>% filter(hemisphere == 1),
xc = all_of("e_breadth"),
yc = all_of("lat_median_n"),
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Northern hemisphere",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal median',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 50)
median_ebreadth_s <- my_plotting(ds %>% filter(hemisphere == -1),
xc = "e_breadth",
yc = "lat_median_s",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Southern hemisphere",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal median',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 50)
median_ebreadth_g <- my_plotting(ds,
xc = "e_breadth",
yc = "lat_median_g",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Global",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal median',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = -50,
y_lim_n = 50)
#------------- Environmental breadth vs. latitudinal range
ebreadth_range_n <- my_plotting(ds %>% filter(hemisphere == 1),
xc = "e_breadth",
yc = "lat_range_sd_n",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Northern hemisphere",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
ebreadth_range_s <- my_plotting(ds %>% filter(hemisphere == -1),
xc = "e_breadth",
yc = "lat_range_sd_s",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Southern hemisphere",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
ebreadth_range_g <- my_plotting(ds,
xc = "e_breadth",
yc = "lat_range_sd_g",
gfc = "growthform",
binc = "bin",
gf_sel = growthform,
ttitle = "Global",
xxlab = 'Environmental breadth',
yylab = 'Latitudinal range',
plot_type = plot.type,
binning = bin.ning,
y_lim_s = 0,
y_lim_n = 10)
p <- cowplot::plot_grid(median_lrange_n + theme(legend.position = "none"),
median_lrange_s + theme(legend.position = "none"),
median_lrange_g,
median_ebreadth_n + theme(legend.position = "none"),
median_ebreadth_s + theme(legend.position = "none"),
median_ebreadth_g,
ebreadth_range_n + theme(legend.position = "none"),
ebreadth_range_s + theme(legend.position = "none"),
ebreadth_range_g,
rel_widths = c(1, 1, 1.3,
1, 1, 1.3,
1, 1, 1.3),
ncol = 3, align = "h",
labels = c("A", "B", "C",
"D", "E", "F",
"G", "H", "I"),
label_size = 25)
return(p)
}
p <- nine_plots(ds = niche_data,
growthform = "tree",
plot.type = "p_mean",
bin.ning = "eq_points")
p
niche_data <- read_csv("./../3_generated_data/niche_data_final.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/6)); range(niche_data$e_breadth); ds <- niche_data
p <- nine_plots(ds = niche_data,
growthform = "tree",
plot.type = "p_mean",
bin.ning = "eq_points")
p
niche_data <- read_csv("./../3_generated_data/niche_data_final.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4)); range(niche_data$e_breadth); ds <- niche_data
p <- nine_plots(ds = niche_data,
growthform = "tree",
plot.type = "p_mean",
bin.ning = "eq_points")
p <- nine_plots(ds = niche_data,
growthform = "tree",
plot.type = "p_median",
bin.ning = "eq_points")
p
p <- nine_plots(ds = niche_data,
growthform = "tree",
plot.type = "p_mean",
bin.ning = "eq_points")
p
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 3840*1.5, height = 2160*1.5, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 3000, height = 2000, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 6000, height = 4000, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 5000, height = 3000, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 4000, height = 3000, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 4000, height = 2500, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 3500, height = 2500, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 4000, height = 3000, units = "px")
ggsave("./../tmp/9-fig-tree-mean-eqpoints.jpg",
width = 4000, height = 3000, units = "px")
p <- nine_plots(ds = niche_data,
growthform = "herb",
plot.type = "p_mean",
bin.ning = "eq_points")
p
ggsave("./../tmp/9-fig-herb-mean-eqpoints.jpg",
width = 4000, height = 3000, units = "px")
