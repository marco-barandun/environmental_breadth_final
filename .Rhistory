bgExt = bgExt)
# Plotting the models geographically, without needing to run the models again
if (p_lot_unplotted == TRUE) {
if (file.exists(paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))) {
if (file.exists(paste("./../3_generated_data/res_SDM_plots/", species, "_global.png", sep = ""))) {next} else {
if (debug == TRUE) {print(paste("Generating plot for unplotted species:", species))}
models <- readRDS(paste("./../generated_data/res_saved_models/", species, "_models.rds", sep = ""))
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
env_breadth <- read_csv(list.files(path="./../3_generated_data/res_maxent_result_tables/", pattern= paste(species, "_maxent_results.csv", sep = ""), full.names=TRUE)) %>%
filter(Species == species) %>%
.$env_breadth
predSel <- wallace::predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- wallace::predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
next
}
}
}
# Sample background points from the provided area
AvPoints <- raster::ncell(bgMask) - raster::freq(bgMask, value = NA)[[1]]
if (AvPoints >= 10000) {numberPoints <- 10000} else {numberPoints <- AvPoints}
bgSample <- wallace::penvs_bgSample(
occs = sp.occs.thinned.vals,
bgMask =  bgMask,
bgPtsNum = numberPoints)
# Extract values of environmental layers for each background point
bgEnvsVals <- as.data.frame(raster::extract(bgMask,  bgSample))
##Add extracted values to background points table
bgEnvsVals <- cbind(occID = NA, Species = paste0("bg_", species), bgSample, bgEnvsVals)
### Partition occurrence data
#Partition occurrences and background points for model training and
#validation using “hierarchical checkerboard”, a spatial partition method
#with an aggregation factor of 2.
# R code to get partitioned data
groups <- wallace::part_partitionOccs(
occs = sp.occs.thinned.vals ,
bg =  bgSample,
method = "cb2",
bgMask = bgMask,
aggFact = 2)
#  Generating a species distribution model using the maxnet algorithm as
#  implemented in ENMeval V2.0 (with clamping = FALSE). For tuning using L
#  feature classes and regularization multipliers in the 1, 2 range
#  increasing by 1. Not using any categorical predictor variables.
# Run maxent model for the selected species
models <- my_model_maxent(
occs = sp.occs.thinned.vals,
bg = bgEnvsVals,
user.grp = groups,
bgMsk = bgMask,
rms = c(1, 4),
rmsStep =  0.5,
fcs = c('L','LQ'),
clampSel = TRUE,
algMaxent = "maxnet",
parallel = FALSE,
numCores = 1)
if (export == TRUE) {saveRDS(models, file = paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))}
# Select best model and obtain raster prediction
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
# Adding the enironmental breadth of the best model to the results table
results_ordered$env_breadth[1] <- as.numeric(env.breadth.cloglog(model = m, env = env_values))
if (debug == TRUE) {
print(paste("------------------------------ Niche breadth of", species, ":", results_ordered$env_breadth[1]))
}
if (export == TRUE) {
write_csv(results_ordered %>% mutate(Species = species), paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = ""))
}
if (p_lot == TRUE) {
predSel <- predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
}
}
}
run.maxnet(occurrences_df = ds,
species_list = "Campanula_thyrsoides",
env_values = envs)
niche_data <- read_csv("./3_generated_data/niche_data_final_summarized_v4.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4))
library(tidyverse)
setwd("/Users/marco/GitHub/environmental_breadth_final/")
niche_data <- read_csv("./3_generated_data/niche_data_final_summarized_v4.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4))
trees <- read_csv("./3_generated_data/used_variables_bin_trees.csv") %>%
filter(species %in% niche_data$Species) %>%
mutate_at(vars(-one_of(c("species", "growthform"))), ~ifelse(!is.na(.), 1, NA))
herbs <- read_csv("./3_generated_data/used_variables_bin_herbs.csv") %>%
filter(species %in% niche_data$Species)
ds <- herbs
sum_table <- data.frame(Column = colnames(ds %>% dplyr::select(-species, -growthform)), Sum = colSums(ds %>% dplyr::select(-species, -growthform), na.rm = TRUE)) %>%
arrange(-Sum)
sum_table
# Create a new column to group the rows
sum_table$Variable <- ifelse(grepl("SG", sum_table$Column), "SG", "CHELSA")
sum_table
sum_table
library("tidyverse")
library("data.table")
library("dplyr")
library("ggpubr")
library("viridis")
library("plotly")
library("gridExtra")
library("data.table")
library("viridis")
setwd("/Users/marco/GitHub/environmental_breadth_final/"); getwd()
source("./2_scripts/5-1_coefficients.R")
allres_lmlr <- as.data.frame(allres_lmlr)
allres_lmeb <- as.data.frame(allres_lmeb)
allres_lmlr <- as.data.frame(allres_lmlr)
# Set global text size options
element_text_size <- 17
element_title_size <- 14.5
annotate_text_size <- 5
# ------ Import and filter data --------------------------------------------------------------------------
niche_data <- read_csv("./3_generated_data/niche_data_final_summarized_v4.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4)) %>%
left_join(read_csv("./3_generated_data/zones_v3.csv"), by = "Species")
# Defining color palette
mycolors <- c("#00000000", colorRampPalette(c("#FFFFD6FF", "yellow", "orange", "red"), alpha=TRUE)(20))
# ------ Figure 4A: Latitudinal gradients of environmental breadth - Global, tree -------------
F4A_data <- niche_data %>% filter(growthform == "tree")
F4A_breaks <- quantile(F4A_data[["lat_median_g"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4A <- ggplot(data = F4A_data,
aes(x = lat_median_g, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4A_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
ggtitle("Global, tree") +
xlab("Latitudinal median") +
ylab("Environmental breath") +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim=c(0, 0.8))
# ------ Figure 4B: Latitudinal gradients of environmental breadth - Global, herb -------------
F4B_data <- niche_data %>% filter(growthform == "herb")
F4B_breaks <- quantile(F4B_data[["lat_median_g"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4B <- ggplot(data = F4B_data,
aes(x = lat_median_g, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4B_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
ggtitle("Global, non-tree") +
xlab("Latitudinal median") +
ylab("Environmental breadth") +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim=c(0, 0.8))
# ------ Figure 4C: Latitudinal gradients of environmental breadth - Northern hemisphere, tree -------------
F4C_data <- niche_data %>% filter(growthform == "tree")
F4C_breaks <- quantile(F4C_data[["lat_median_n"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4C <- ggplot(data = F4C_data,
aes(x = lat_median_n, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4C_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
geom_smooth(
aes(linetype = .data[["zone_n"]]),
color = "black",
method = "lm",
na.rm = TRUE,
show.legend = FALSE) +
ggtitle("Northern hemisphere, tree") +
xlab("Latitudinal median") +
ylab("Environmental breadth") +
annotate("text", x = 12, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "North") %>%
filter(growthform == "tree") %>%
filter(zone == "tropical") %>%
.$valse)) +
annotate("text", x = 45, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "North") %>%
filter(growthform == "tree") %>%
filter(zone == "else") %>%
.$valse)) +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim = c(0, 0.8), xlim = c(0, 70))
# ------ Figure 4D: Latitudinal gradients of environmental breadth - Northern hemisphere, herb -------------
F4D_data <- niche_data %>% filter(growthform == "herb")
F4D_breaks <- quantile(F4D_data[["lat_median_n"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4D <- ggplot(data = F4D_data,
aes(x = lat_median_n, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4D_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
geom_smooth(
aes(linetype = .data[["zone_n"]]),
color = "black",
method = "lm",
na.rm = TRUE,
show.legend = FALSE) +
ggtitle("Northern hemisphere, non-tree") +
xlab("Latitudinal median") +
ylab("Environmental breadth") +
annotate("text", x = 12, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "North") %>%
filter(growthform == "herb") %>%
filter(zone == "tropical") %>%
.$valse)) +
annotate("text", x = 45, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "North") %>%
filter(growthform == "herb") %>%
filter(zone == "else") %>%
.$valse)) +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim = c(0, 0.8), xlim = c(0, 70))
# ------ Figure 4E: Latitudinal gradients of environmental breadth - Southern hemisphere, tree -------------
F4E_data <- niche_data %>% filter(growthform == "tree"); range(F4E_data$lat_range_sd_s)
F4E_breaks <- quantile(F4E_data[["lat_median_s"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4E <- ggplot(data = F4E_data,
aes(x = lat_median_s, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4E_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
geom_smooth(
aes(linetype = .data[["zone_s"]]),
color = "black",
method = "lm",
na.rm = TRUE,
show.legend = FALSE) +
ggtitle("Southern hemisphere, tree") +
xlab("Latitudinal median") +
ylab("Environmental breadth") +
annotate("text", x = 12, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "South") %>%
filter(growthform == "tree") %>%
filter(zone == "tropical") %>%
.$valse)) +
annotate("text", x = 45, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "South") %>%
filter(growthform == "tree") %>%
filter(zone == "else") %>%
.$valse)) +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim = c(0, 0.8), xlim = c(0, 70))
# ------ Figure 4F: Latitudinal gradients of environmental breadth - Southern hemisphere, herb -------------
F4F_data <- niche_data %>% filter(growthform == "herb"); range(F4F_data$lat_range_sd_s)
F4F_breaks <- quantile(F4F_data[["lat_median_s"]], probs = seq(0, 1, by = 0.05), na.rm = TRUE)
F4F <- ggplot(data = F4F_data,
aes(x = lat_median_s, y = e_breadth)) +
geom_density_2d_filled(bins = 20, show.legend = FALSE) +
stat_summary_bin(breaks = F4F_breaks,
fun = mean,
fun.min = function(x) mean(x)-sd(x)/sqrt(length(x)),
fun.max = function(x) mean(x)+sd(x)/sqrt(length(x)),
color = "azure4") +
geom_smooth(
aes(linetype = .data[["zone_s"]]),
color = "black",
method = "lm",
na.rm = TRUE,
show.legend = FALSE) +
ggtitle("Southern hemisphere, non-tree") +
xlab("Latitudinal median") +
ylab("Environmental breadth") +
annotate("text", x = 12, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "South") %>%
filter(growthform == "herb") %>%
filter(zone == "tropical") %>%
.$valse)) +
annotate("text", x = 45, y = 0.75, size = 5,
label = paste("β =",
allres_lmeb %>%
filter(hemisphere == "South") %>%
filter(growthform == "herb") %>%
filter(zone == "else") %>%
.$valse)) +
theme_classic() +
theme(text = element_text(size = element_text_size),
title = element_text(size = element_title_size)) +
scale_fill_manual(values = mycolors) +
coord_cartesian(ylim = c(0, 0.8), xlim = c(0, 70))
# ------ Joining and saving the plots -------------------------------------------------------------
(F4 <- cowplot::plot_grid(F4A,
F4B,
F4C,
F4D,
F4E,
F4F,
rel_widths = c(1.3, 1, 1,
1.3, 1, 1),
ncol = 3, byrow = FALSE,
labels = c("A", "C", "E",
"B", "D", "F"),
label_size = 20)
)
ggsave("./tmp/final/figure_4.jpg",
width = 4000, height = 2000, units = "px")
sum_table
library(tidyverse)
setwd("/Users/marco/GitHub/environmental_breadth_final/")
niche_data <- read_csv("./3_generated_data/niche_data_final_summarized_v4.csv") %>%
mutate(e_breadth = (env_breadth*mess)^(1/4))
trees <- read_csv("./3_generated_data/used_variables_bin_trees.csv") %>%
filter(species %in% niche_data$Species) %>%
mutate_at(vars(-one_of(c("species", "growthform"))), ~ifelse(!is.na(.), 1, NA))
herbs <- read_csv("./3_generated_data/used_variables_bin_herbs.csv") %>%
filter(species %in% niche_data$Species)
ds <- herbs
sum_table <- data.frame(Column = colnames(ds %>% dplyr::select(-species, -growthform)), Sum = colSums(ds %>% dplyr::select(-species, -growthform), na.rm = TRUE)) %>%
arrange(-Sum)
#print(sum_table)
# Create a new column to group the rows
sum_table$Variable <- ifelse(grepl("SG", sum_table$Column), "SG", "CHELSA")
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]|^CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]|^CHELSA_adj_1[0-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]|CHELSA_adj_1[0-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$feature <- ifelse(grepl("I(", sum_table$Column), "QUADRATIC", "LINEAR")
sum_table$feature <- ifelse(grepl("I\(", sum_table$Column), "QUADRATIC", "LINEAR")
sum_table$feature <- ifelse(grepl("I\\(", sum_table$Column), "QUADRATIC", "LINEAR")
sum_table
table(sum_table$type, sum_table$feature)
sum_table$group <- paste(sum_table$feature, sum_table$type, sep = "-")
table(sum_table$group, sum_table$Sum)
table(sum_table$sum, sum_table$group)
sum_table$group <- paste(sum_table$feature, sum_table$type, sep = "-")
sum_table
(overview <- sum_table %>%
group_by(group) %>%
summarize(average_sum = mean(Sum)))
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table <- data.frame(Column = colnames(ds %>% dplyr::select(-species, -growthform)), Sum = colSums(ds %>% dplyr::select(-species, -growthform), na.rm = TRUE)) %>%
arrange(-Sum)
#print(sum_table)
# Create a new column to group the rows
sum_table$Variable <- ifelse(grepl("SG", sum_table$Column), "SG", "CHELSA")
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-11]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_[12-19]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[0-9]$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table <- data.frame(Column = colnames(ds %>% dplyr::select(-species, -growthform)), Sum = colSums(ds %>% dplyr::select(-species, -growthform), na.rm = TRUE)) %>%
arrange(-Sum)
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table <- data.frame(Column = colnames(ds %>% dplyr::select(-species, -growthform)), Sum = colSums(ds %>% dplyr::select(-species, -growthform), na.rm = TRUE)) %>%
arrange(-Sum) %>%
mutate(type = NULL)
# Create a new column to group the rows
sum_table$Variable <- ifelse(grepl("SG", sum_table$Column), "SG", "CHELSA")
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("CHELSA_adj_[1-9]|CHELSA_adj_1[0-1]", sum_table$Column), "TEMPERATURE",
ifelse(grepl("CHELSA_adj_1[2-9]|CHELSA_adj_1[2-9]", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^I\\(CHELSA_adj_[1-9])$|^I\\(CHELSA_adj_1[0-1])$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(grepl("^I\\(CHELSA_adj_1[2-9])$|^I\\(CHELSA_adj_1[2-9])$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^I\\(CHELSA_adj_[1-9]^2)$|^I\\(CHELSA_adj_1[0-1^2])$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(grepl("^I\\(CHELSA_adj_1[2-9]^2)$|^I\\(CHELSA_adj_1[2-9]^2)$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^I\\(CHELSA_adj_[1-9]\\^2\\)$|^I\\(CHELSA_adj_1[0-1]\\^2\\)$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(grepl("^I\\(CHELSA_adj_1[2-9]\\^2\\)$|^I\\(CHELSA_adj_1[2-9]\\^2\\)$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))))
sum_table
sum_table$type <- ifelse(grepl("^CHELSA_adj_[1-9]$|^CHELSA_adj_1[0-1]$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^I\\(CHELSA_adj_[1-9]\\^2\\)$|^I\\(CHELSA_adj_1[0-1]\\^2\\)$", sum_table$Column), "TEMPERATURE",
ifelse(grepl("^CHELSA_adj_1[2-9]$|^CHELSA_adj_1[2-9]$", sum_table$Column), "PRECIPITATION",
ifelse(grepl("^I\\(CHELSA_adj_1[2-9]\\^2\\)$|^I\\(CHELSA_adj_1[2-9]\\^2\\)$", sum_table$Column), "PRECIPITATION",
ifelse(sum_table$Variable == "SG", "SOIL", NA)))))
sum_table$feature <- ifelse(grepl("I\\(", sum_table$Column), "QUADRATIC", "LINEAR")
# Reorder the rows within each group based on the presence of "I("
sum_table$Column <- reorder(sum_table$Column, grepl("CHELSA", sum_table$Column))
sum_table$Column <- reorder(sum_table$Column, grepl("I\\(", sum_table$Column))
sum_table$group <- paste(sum_table$feature, sum_table$type, sep = "-")
(overview <- sum_table %>%
group_by(group) %>%
summarize(average_sum = mean(Sum)))
overview <- sum_table %>%
group_by(group) %>%
summarize(average_sum = mean(Sum)) %>%
arrange(desc(average_sum))
(overview <- sum_table %>%
group_by(group) %>%
summarize(average_sum = mean(Sum)) %>%
arrange(desc(average_sum)))
